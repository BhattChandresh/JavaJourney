Reference: https://www.baeldung.com/circular-dependencies-in-spring

> A circular dependency occurs when a bean A depends on another bean B, and the bean B depends on bean A as well:
> Bean A → Bean B → Bean A
> Of course, we could have more beans implied:  Bean A → Bean B → Bean C → Bean D → Bean E → Bean A

> When the Spring context loads all the beans, it tries to create beans in the order needed for them to work completely.

> Let’s say we don’t have a circular dependency. We instead have something like this:

> Bean A → Bean B → Bean C

> Spring will create bean C, then create bean B (and inject bean C into it), then create bean A (and inject bean B into it).

> But with a circular dependency,
> Spring cannot decide which of the beans should be created first since they depend on one another.
> In these cases, Spring will raise a BeanCurrentlyInCreationException while loading context.


Resolution:
> A simple way to break the cycle is by telling Spring to initialize one of the beans lazily.
> So, instead of fully initializing the bean, it will create a proxy to inject it into the other bean.
> The injected bean will only be fully created when it’s first needed.

> We should first consider redesigning our beans so there is no need for circular dependencies.
> That’s because circular dependencies are usually a symptom of a design that can be improved.

> f we absolutely need circular dependencies in our project, we can follow the given workaround.



